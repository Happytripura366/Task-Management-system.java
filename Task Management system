import java.util.*;

// Base Class (Abstraction + Encapsulation)
class Task {
    private String title;
    private String description;
    private String dueDate;
    private boolean isCompleted;

    public Task(String title, String description, String dueDate) {
        this.title = title;
        this.description = description;
        this.dueDate = dueDate;
        this.isCompleted = false;
    }

    // Getters & Setters (Encapsulation)
    public String getTitle() { return title; }
    public String getDescription() { return description; }
    public String getDueDate() { return dueDate; }
    public boolean isCompleted() { return isCompleted; }

    public void markCompleted() {
        isCompleted = true;
    }

    // Display task info (can be overridden - Polymorphism)
    public void displayTask() {
        System.out.println("Task: " + title);
        System.out.println("Description: " + description);
        System.out.println("Due Date: " + dueDate);
        System.out.println("Status: " + (isCompleted ? "Completed" : "Pending"));
    }
}

// Derived Class (Inheritance + Polymorphism)
class WorkTask extends Task {
    private String assignedTo;

    public WorkTask(String title, String description, String dueDate, String assignedTo) {
        super(title, description, dueDate);
        this.assignedTo = assignedTo;
    }

    // Overriding method (Polymorphism)
    @Override
    public void displayTask() {
        super.displayTask();
        System.out.println("Assigned To: " + assignedTo);
    }
}

// Derived Class (Inheritance + Polymorphism)
class PersonalTask extends Task {
    public PersonalTask(String title, String description, String dueDate) {
        super(title, description, dueDate);
    }

    // Overriding method (Polymorphism)
    @Override
    public void displayTask() {
        super.displayTask();
        System.out.println("This is a personal task.");
    }
}

// Class to manage User's tasks (Encapsulation + Abstraction)
class User {
    private String name;
    private List<Task> tasks;

    public User(String name) {
        this.name = name;
        this.tasks = new ArrayList<>();
    }

    public void addTask(Task task) {
        tasks.add(task);
        System.out.println("Task added successfully.");
    }

    public void displayAllTasks() {
        System.out.println("\nTasks for " + name + ":");
        for (Task task : tasks) {
            task.displayTask();
            System.out.println("----------------------");
        }
    }
}

// Main class to drive the system
public class TaskManagementSystem {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        User user = new User("Default User");

        while (true) {
            System.out.println("\n--- Task Management System ---");
            System.out.println("1. Add Work Task");
            System.out.println("2. Add Personal Task");
            System.out.println("3. View All Tasks");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = sc.nextInt(); sc.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Title: ");
                    String wTitle = sc.nextLine();
                    System.out.print("Description: ");
                    String wDesc = sc.nextLine();
                    System.out.print("Due Date: ");
                    String wDate = sc.nextLine();
                    System.out.print("Assigned To: ");
                    String assigned = sc.nextLine();
                    user.addTask(new WorkTask(wTitle, wDesc, wDate, assigned));
                    break;

                case 2:
                    System.out.print("Title: ");
                    String pTitle = sc.nextLine();
                    System.out.print("Description: ");
                    String pDesc = sc.nextLine();
                    System.out.print("Due Date: ");
                    String pDate = sc.nextLine();
                    user.addTask(new PersonalTask(pTitle, pDesc, pDate));
                    break;

                case 3:
                    user.displayAllTasks();
                    break;

                case 4:
                    System.out.println("Exiting... Goodbye!");
                    return;

                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
}
